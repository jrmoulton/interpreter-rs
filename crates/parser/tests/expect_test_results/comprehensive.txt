[
    Let {
        ident: "x",
        expr: IntLiteral {
            val: 5,
            span: (1,12)->(1,12),
        },
        span: (1,4)->(1,12),
    },
    Expression {
        expr: Identifier {
            ident: "foobar",
            span: (2,4)->(2,9),
        },
        terminated: true,
        span: (2,4)->(2,9),
    },
    Let {
        ident: "y",
        expr: Binary {
            lhs: Binary {
                lhs: IntLiteral {
                    val: 3,
                    span: (3,13)->(3,13),
                },
                operator: Token(Plus, (3,15)->(3,15)),
                rhs: IntLiteral {
                    val: 3,
                    span: (3,17)->(3,17),
                },
                span: (3,13)->(3,17),
            },
            operator: Token(Asterisk, (3,20)->(3,20)),
            rhs: IntLiteral {
                val: 5,
                span: (3,22)->(3,22),
            },
            span: (3,13)->(3,22),
        },
        span: (3,4)->(3,22),
    },
    Expression {
        expr: If {
            condition: Identifier {
                ident: "a",
                span: (4,7)->(4,7),
            },
            consequence: Scope {
                statements: [
                    Expression {
                        expr: Identifier {
                            ident: "b",
                            span: (5,6)->(5,6),
                        },
                        terminated: false,
                        span: (5,6)->(5,6),
                    },
                ],
                span: (4,9)->(6,4),
            },
            alternative: Some(
                ElseIf(
                    IfExpr {
                        condition: Identifier {
                            ident: "c",
                            span: (6,14)->(6,14),
                        },
                        consequence: Scope {
                            statements: [
                                Expression {
                                    expr: Identifier {
                                        ident: "d",
                                        span: (7,6)->(7,6),
                                    },
                                    terminated: false,
                                    span: (7,6)->(7,6),
                                },
                            ],
                            span: (6,16)->(8,4),
                        },
                        alternative: Some(
                            Else(
                                Scope {
                                    statements: [
                                        Expression {
                                            expr: Identifier {
                                                ident: "e",
                                                span: (9,6)->(9,6),
                                            },
                                            terminated: false,
                                            span: (9,6)->(9,6),
                                        },
                                    ],
                                    span: (8,11)->(10,4),
                                },
                            ),
                        ),
                        span: (6,11)->(10,4),
                    },
                ),
            ),
            span: (4,4)->(10,4),
        },
        terminated: true,
        span: (4,4)->(10,4),
    },
    Let {
        ident: "multiply",
        expr: FuncDef {
            parameters: [
                Ident {
                    ident: "x",
                    span: (11,22)->(11,22),
                },
                Ident {
                    ident: "y",
                    span: (11,25)->(11,25),
                },
            ],
            body: Scope {
                statements: [
                    Expression {
                        expr: Binary {
                            lhs: Identifier {
                                ident: "x",
                                span: (11,28)->(11,28),
                            },
                            operator: Token(Asterisk, (11,30)->(11,30)),
                            rhs: Identifier {
                                ident: "y",
                                span: (11,32)->(11,32),
                            },
                            span: (11,28)->(11,32),
                        },
                        terminated: false,
                        span: (11,28)->(11,32),
                    },
                ],
                span: (11,27)->(11,33),
            },
            span: (11,19)->(11,33),
        },
        span: (11,4)->(11,33),
    },
    Expression {
        expr: Binary {
            lhs: IntLiteral {
                val: 100,
                span: (12,4)->(12,6),
            },
            operator: Token(Slash, (12,8)->(12,8)),
            rhs: IntLiteral {
                val: 20,
                span: (12,10)->(12,11),
            },
            span: (12,4)->(12,11),
        },
        terminated: false,
        span: (12,4)->(12,11),
    },
]