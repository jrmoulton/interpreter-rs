[
    Let(
        LetStatement {
            ident: Token(Ident("x"), (1,8)->(1,9)),
            expr: Terminated(
                IntLiteral(
                    Token(Int(5), (1,12)->(1,13)),
                ),
            ),
        },
    ),
    Expression(
        Terminated(
            Identifier(
                Ident(
                    Token(Ident("foobar"), (2,4)->(2,10)),
                ),
            ),
        ),
    ),
    Let(
        LetStatement {
            ident: Token(Ident("y"), (3,8)->(3,9)),
            expr: Terminated(
                BinaryExpression(
                    BinExp {
                        lhs: BinaryExpression(
                            BinExp {
                                lhs: IntLiteral(
                                    Token(Int(3), (3,13)->(3,14)),
                                ),
                                operator: Token(Plus, (3,15)->(3,16)),
                                rhs: IntLiteral(
                                    Token(Int(3), (3,17)->(3,18)),
                                ),
                            },
                        ),
                        operator: Token(Asterisk, (3,20)->(3,21)),
                        rhs: IntLiteral(
                            Token(Int(5), (3,22)->(3,23)),
                        ),
                    },
                ),
            ),
        },
    ),
    Expression(
        NonTerminated(
            If(
                IfExpr {
                    condition: Identifier(
                        Ident(
                            Token(Ident("a"), (4,7)->(4,8)),
                        ),
                    ),
                    consequence: Scope {
                        statements: [
                            Expression(
                                NonTerminated(
                                    Identifier(
                                        Ident(
                                            Token(Ident("b"), (5,6)->(5,7)),
                                        ),
                                    ),
                                ),
                            ),
                        ],
                    },
                    alternative: Some(
                        ElseIf(
                            If(
                                IfExpr {
                                    condition: Identifier(
                                        Ident(
                                            Token(Ident("c"), (6,14)->(6,15)),
                                        ),
                                    ),
                                    consequence: Scope {
                                        statements: [
                                            Expression(
                                                NonTerminated(
                                                    Identifier(
                                                        Ident(
                                                            Token(Ident("d"), (7,6)->(7,7)),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ],
                                    },
                                    alternative: Some(
                                        Else(
                                            Scope {
                                                statements: [
                                                    Expression(
                                                        NonTerminated(
                                                            Identifier(
                                                                Ident(
                                                                    Token(Ident("e"), (9,6)->(9,7)),
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ),
        ),
    ),
    Let(
        LetStatement {
            ident: Token(Ident("multiply"), (11,8)->(11,16)),
            expr: Terminated(
                FuncLiteral(
                    FnLiteral {
                        parameters: [
                            Ident(
                                Token(Ident("x"), (11,22)->(11,23)),
                            ),
                            Ident(
                                Token(Ident("y"), (11,25)->(11,26)),
                            ),
                        ],
                        body: Scope {
                            statements: [
                                Expression(
                                    NonTerminated(
                                        BinaryExpression(
                                            BinExp {
                                                lhs: Identifier(
                                                    Ident(
                                                        Token(Ident("x"), (11,28)->(11,29)),
                                                    ),
                                                ),
                                                operator: Token(Asterisk, (11,30)->(11,31)),
                                                rhs: Identifier(
                                                    Ident(
                                                        Token(Ident("y"), (11,32)->(11,33)),
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            ],
                        },
                    },
                ),
            ),
        },
    ),
    Expression(
        NonTerminated(
            BinaryExpression(
                BinExp {
                    lhs: IntLiteral(
                        Token(Int(100), (12,4)->(12,7)),
                    ),
                    operator: Token(Slash, (12,8)->(12,9)),
                    rhs: IntLiteral(
                        Token(Int(20), (12,10)->(12,12)),
                    ),
                },
            ),
        ),
    ),
]