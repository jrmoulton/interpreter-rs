[Let(LetStatement { ident: LocTok { line: 1, column: 8, abs_pos: 9, len: 1, token: Ident("x") }, expr: Terminated(IntLiteral(LocTok { line: 1, column: 12, abs_pos: 13, len: 1, token: Int(5) })) }), Expression(Terminated(Identifier(Ident(LocTok { line: 2, column: 4, abs_pos: 20, len: 6, token: Ident("foobar") })))), Let(LetStatement { ident: LocTok { line: 3, column: 8, abs_pos: 36, len: 1, token: Ident("y") }, expr: Terminated(BinaryExpression(BinExp { lhs: BinaryExpression(BinExp { lhs: IntLiteral(LocTok { line: 3, column: 13, abs_pos: 41, len: 1, token: Int(3) }), operator: LocTok { line: 3, column: 15, abs_pos: 43, len: 1, token: Plus }, rhs: IntLiteral(LocTok { line: 3, column: 17, abs_pos: 45, len: 1, token: Int(3) }) }), operator: LocTok { line: 3, column: 20, abs_pos: 48, len: 1, token: Asterisk }, rhs: IntLiteral(LocTok { line: 3, column: 22, abs_pos: 50, len: 1, token: Int(5) }) })) }), Expression(NonTerminated(If(IfExpr { condition: Identifier(Ident(LocTok { line: 4, column: 7, abs_pos: 60, len: 1, token: Ident("a") })), consequence: Scope { statements: [Expression(NonTerminated(Identifier(Ident(LocTok { line: 5, column: 6, abs_pos: 70, len: 1, token: Ident("b") }))))] }, alternative: Some(ElseIf(If(IfExpr { condition: Identifier(Ident(LocTok { line: 6, column: 14, abs_pos: 86, len: 1, token: Ident("c") })), consequence: Scope { statements: [Expression(NonTerminated(Identifier(Ident(LocTok { line: 7, column: 6, abs_pos: 96, len: 1, token: Ident("d") }))))] }, alternative: Some(Else(Scope { statements: [Expression(NonTerminated(Identifier(Ident(LocTok { line: 9, column: 6, abs_pos: 117, len: 1, token: Ident("e") }))))] })) }))) }))), Let(LetStatement { ident: LocTok { line: 11, column: 8, abs_pos: 133, len: 8, token: Ident("multiply") }, expr: Terminated(FuncLiteral(FnLiteral { parameters: [Ident(LocTok { line: 11, column: 22, abs_pos: 147, len: 1, token: Ident("x") }), Ident(LocTok { line: 11, column: 25, abs_pos: 150, len: 1, token: Ident("y") })], body: Scope { statements: [Expression(NonTerminated(BinaryExpression(BinExp { lhs: Identifier(Ident(LocTok { line: 11, column: 28, abs_pos: 153, len: 1, token: Ident("x") })), operator: LocTok { line: 11, column: 30, abs_pos: 155, len: 1, token: Asterisk }, rhs: Identifier(Ident(LocTok { line: 11, column: 32, abs_pos: 157, len: 1, token: Ident("y") })) })))] } })) }), Expression(NonTerminated(BinaryExpression(BinExp { lhs: IntLiteral(LocTok { line: 12, column: 4, abs_pos: 165, len: 3, token: Int(100) }), operator: LocTok { line: 12, column: 8, abs_pos: 169, len: 1, token: Slash }, rhs: IntLiteral(LocTok { line: 12, column: 10, abs_pos: 171, len: 2, token: Int(20) }) })))]